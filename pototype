using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class playerController : MonoBehaviour
{
    GameObject player;
    Rigidbody2D rb;
    DistanceJoint2D joint;
    LineRenderer line;
    RaycastHit2D hit;
    public LayerMask mask;
    public float speed;
    public float jumpForce;
    public float step = 0.02f;
    public float distance = 10.0f;
    bool isGrounded = true;

    // Start is called before the first frame update
    void Start()
    {
        line = GetComponent<LineRenderer>();
        rb = GetComponent<Rigidbody2D>();
        joint = GetComponent<DistanceJoint2D>();
        joint.enabled = false;
        line.enabled = false;
    }

    // Update is called once per frame
    void Update()
    {
        float x = Input.GetAxis("Horizontal");

        rb.velocity = new Vector3(x * speed, rb.velocity.y, 0);

        if(Input.GetKeyDown(KeyCode.Space) && isGrounded == true)
        {
            rb.velocity = new Vector3(rb.velocity.x, jumpForce, 0);
            isGrounded = false;
        }

        if (joint.distance > 0.5f)
        {
            joint.distance -= step;
        }
        else
        {
            line.enabled = false;
            joint.enabled = false;
        }

        if (Input.GetMouseButtonDown(0)) ///If Left Click
        {
            Vector3 mousePosition = Input.mousePosition; //Assigns the mouse position as a variable so it is able to be used
            mousePosition = Camera.main.ScreenToWorldPoint(mousePosition); //Sets the mouse position from screen space to world space

            Vector2 direction = new Vector2(mousePosition.x - transform.position.x, mousePosition.y - transform.position.y);

            hit = Physics2D.Raycast(transform.position, direction, distance);

            if (hit.collider.gameObject.name == "grapple") //Checks if thee ray hits anything
            {
                Debug.DrawRay(transform.position, direction, Color.green, 60); //Draws a green line
                Debug.Log("Hit a graple location");

                joint.enabled = true;
                

                Vector2 connectPoint = hit.point - new Vector2(hit.collider.transform.position.x, hit.collider.transform.position.y);
                connectPoint.x = connectPoint.x / hit.collider.transform.localScale.x;
                connectPoint.y = connectPoint.y / hit.collider.transform.localScale.y;
                Debug.Log(connectPoint);
                joint.connectedAnchor = connectPoint;

                //joint.connectedAnchor = hit.point - new Vector2(hit.collider.transform.position.x, hit.collider.transform.position.y);
                joint.connectedBody = hit.collider.gameObject.GetComponent<Rigidbody2D>();
                joint.distance = Vector2.Distance(transform.position, hit.point);

                line.enabled = true;
                line.SetPosition(0, transform.position);
                line.SetPosition(1, hit.point);
            }
            /*else
            {
                Debug.DrawRay(transform.position, direction, Color.red, 3);
                Debug.Log("Didnt hit a grapple location");
            }*/
        }

        //line.SetPosition(1, joint.connectedBody.transform.TransformPoint(joint.connectedAnchor));

        if(Input.GetKey(KeyCode.E))
        {
            line.SetPosition(0, transform.position);
        }

        if (Input.GetKeyUp (KeyCode.E))
        {
            joint.enabled = false;
            line.enabled = false;
        }
            
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if(collision.collider.tag == "grounded")
        {
            isGrounded = true;
        }
    }
}
